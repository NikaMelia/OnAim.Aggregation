using System.Text.Json;
using AutoMapper;
using MongoDB.Bson;
using OnAim.Aggregation.Domain.Entities;

namespace OnAim.Aggregation.Api.Dtos.Mapping;

public class ConfigMappingProfile : Profile
{
    public ConfigMappingProfile()
    {
        CreateMap<FilterClauseDto, FilterClause>()
            .ConvertUsing(src => FilterClause.CreateFilterClause(src.Field, (Domain.Entities.FilterOperator)(int)src.Op, src.Value.ToBsonValue()));

        // Request â†’ Domain
        CreateMap<CreateAggregationConfigRequest, AggregationConfig>()
            .ForMember(d => d.Rule, o => o.MapFrom(s =>
                AggregationRule.Create(s.Rule.PointsThreshold, s.Rule.PointsAwarded)))
            .ForMember(d => d.Filters, o => o.MapFrom(s => s.Filters))
            .ForMember(d=>d.Id, o=>o.Ignore()) // Id is generated by MongoDB
            .ForMember(d => d.CreatedAtUtc, o => o.MapFrom(_ => DateTime.UtcNow));
    }
}

public static class FilterValueConverter
{
    public static BsonValue ToBsonValue(this JsonElement je)
    {
        switch (je.ValueKind)
        {
            case JsonValueKind.Number:
                if (je.TryGetInt32(out var i))   return new BsonInt32(i);
                if (je.TryGetInt64(out var l))   return new BsonInt64(l);
                if (je.TryGetDecimal(out var d)) return new BsonDecimal128(d);
                return new BsonDouble(je.GetDouble());

            case JsonValueKind.String:
                var s = je.GetString()!;
                // if the string is numeric, treat it as a number
                if (int.TryParse(s, out var i2))   return new BsonInt32(i2);
                if (decimal.TryParse(s, out var d2)) return new BsonDecimal128(d2);
                return new BsonString(s);

            case JsonValueKind.True:  return BsonBoolean.True;
            case JsonValueKind.False: return BsonBoolean.False;
            case JsonValueKind.Null:
            case JsonValueKind.Undefined: return BsonNull.Value;
            default:
                // arrays/objects if you ever need them
                return MongoDB.Bson.Serialization.BsonSerializer.Deserialize<BsonValue>(je.GetRawText());
        }
    }
}